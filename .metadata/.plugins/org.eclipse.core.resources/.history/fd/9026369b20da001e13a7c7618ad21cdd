package com.example.identity.serviceimpl;

import java.util.List;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.identity.dto.UserRegistrationDto;
import com.example.identity.entity.UserRegistration;
import com.example.identity.repository.UserRepository;
import com.example.identity.service.AuthService;
import com.example.identity.service.JwtService;

@Service
public class AuthServiceImpl implements AuthService {

	@Autowired
	private UserRepository userRepo;

	@Autowired
	private PasswordEncoder passwordEncoder;

	boolean flag;

	@Autowired
	private ModelMapper modelMapper;
	
	@Autowired 
	private JwtService jwtService;

	@Override
	public String saveUser(UserRegistrationDto userDto) {
	    // Fetch all users from the repository
	    List<UserRegistration> userList = userRepo.findAll();

	    // Map each UserRegistration entity to a UserRegistrationDto
	    List<UserRegistrationDto> userDtoList = userList.stream()
	            .map(user -> modelMapper.map(user, UserRegistrationDto.class))
	            .collect(Collectors.toList());

	    // Check if the user with the same name already exists
	    boolean userExists = userDtoList.stream()
	            .anyMatch(existingUser -> existingUser.getName().equals(userDto.getName()));

	    if (userExists) {
	        return "User already exists";
	    } else {
	        // Encode the password and save the new user
	        userDto.setPassword(passwordEncoder.encode(userDto.getPassword()));
	        userRepo.save(modelMapper.map(userDto, UserRegistration.class));
	        return "Saved User";
	    }
	}


	@Override
	public String generateToken(String username) {
		// TODO Auto-generated method stub
		
		return jwtService.generateToken(username);
	}

	@Override
	public void validateToken(String token) {
		// TODO Auto-generated method stub
		jwtService.validateToken(token);
		
	}

}
