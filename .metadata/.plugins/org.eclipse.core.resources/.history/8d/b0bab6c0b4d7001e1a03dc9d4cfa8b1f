package com.example.demo.registration.serviceimpl;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.example.demo.registration.dto.UserRegistrationDto;
import com.example.demo.registration.model.UserRegistration;
import com.example.demo.registration.modelmapper.RegistrationMapper;
import com.example.demo.registration.repository.UserRepository;
import com.example.demo.registration.service.RegistrationService;

@Service
public class RegistrationImpl implements RegistrationService {
	@Autowired
	private UserRepository repository;

	@Autowired
	private PasswordEncoder passwordEncoder;

	@Autowired
	private JwtService jwtService;

	@Value("${microservice2.url}")
	private String microservice2Url;
	
	boolean flag;

	@Override
	public String save(UserRegistrationDto userDto) {

		List<UserRegistration> userList = repository.findAll();
		List<UserRegistrationDto> userDtoList = userList.stream().map(RegistrationMapper::mapToRegistrationDto)
				.collect(Collectors.toList());

		if (userDtoList != null) {
			for (UserRegistrationDto user : userDtoList) {
				if (user.getName().equals(userDto.getName())) {
					flag = true;
				} else {
					flag = false;
				}
			}

			if (flag) {
				return "User already exists";
			} else {
				userDto.setPassword(passwordEncoder.encode(userDto.getPassword()));
				repository.save(RegistrationMapper.mapToRegistration(userDto));
				return "Saved User";
			}
		}
		return "Unable to process registration";
	}

	@Override
	public UserRegistrationDto getById(int userId) {
		// TODO Auto-generated method stub
		Optional<UserRegistration> getById = repository.findById(userId);
		if (getById.isPresent()) {
			UserRegistration user = getById.get();
			UserRegistrationDto userDto = RegistrationMapper.mapToRegistrationDto(user);
			return userDto;
		} else {
			throw new UsernameNotFoundException("User Not found");
		}
	}

	@Override
	public List<UserRegistrationDto> getAllUsers() {
		List<UserRegistration> users = repository.findAll();
		List<UserRegistrationDto> usersDto = users.stream().map(RegistrationMapper::mapToRegistrationDto)
				.collect(Collectors.toList()); // Adding collect() to convert the stream to a list

		return usersDto;
	}

	public void makeRequest(String jwtToken) {
		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization", "Bearer " + jwtToken);
		HttpEntity<String> requestEntity = new HttpEntity<>(headers);
		ResponseEntity<String> response = new RestTemplate().exchange(microservice2Url + "/api/vehicle/addVehicle",
				HttpMethod.GET, requestEntity, String.class);
		String responseBody = response.getBody();
		System.out.println("Response from Microservice2: " + responseBody);
	}

}

//UserRegistration existingUser = repository.findByName(userDto.getName()).get();
//if (existingUser != null) {
//    throw new UserNotFoundException("User already exists with name :" + userDto.getName());
//	//return "User already exists with name :" + existingUser.getName();
//} else {
//    // convert dto to entity
//    UserRegistration userReg = RegistrationMapper.mapToRegistration(userDto);
//    UserRegistration saveUserReg = repository.save(userReg);
//
//    // convert entity to dto
//    UserRegistrationDto userRegDto = RegistrationMapper.mapToRegistrationDto(saveUserReg);
//    return "User registered successfully";
//}
//}
//