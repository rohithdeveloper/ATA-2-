package com.example.demo.registration.serviceimpl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.demo.registration.dto.UserRegistrationDto;
import com.example.demo.registration.model.UserRegistration;
import com.example.demo.registration.repository.UserRepository;
import com.example.demo.registration.service.RegistrationService;

@Service
public class RegistrationImpl implements RegistrationService {

	@Autowired
	private UserRepository userRepo;
	
	@Autowired
	private PasswordEncoder passwordEncoder;

	boolean flag;
	@Override
	public String save(UserRegistrationDto userDto) {
//	    UserRegistration existingUser = userRepo.findByName(userDto.getName());
//	    if (existingUser != null) {
//	        throw new UserNotFoundException("User already exists with name :" + userDto.getName());
//	    	//return "User already exists with name :" + existingUser.getName();
//	    } else {
//	        // convert dto to entity
//	        UserRegistration userReg = RegistrationMapper.mapToRegistration(userDto);
//	        UserRegistration saveUserReg = userRepo.save(userReg);
//
//	        // convert entity to dto
//	        UserRegistrationDto userRegDto = RegistrationMapper.mapToRegistrationDto(saveUserReg);
//	        return "User registered successfully";
//	    }
//	}
List<UserRegistration> userList = userRepo.findAll();
		
		if(null != userList) {
			for(UserRegistration user : userList) {
				if(user.getName().equals(userDto.getName()))
					flag = true;
				else
					flag = false;
			}
		}
		
		if(flag) {
			return "User already exists";
		} else {
			userDto.setPassword(userDto.getPassword());
			userRepo.save(userDto);
			return "User saved";
		}
	}
}

