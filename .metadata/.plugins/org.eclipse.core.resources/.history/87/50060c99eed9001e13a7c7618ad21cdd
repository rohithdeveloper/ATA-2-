//package com.example.vehicle.service;
//
//import java.security.Key;
//import java.util.Collection;
//import java.util.Date;
//import java.util.HashMap;
//import java.util.Map;
//import java.util.function.Function;
//import java.util.stream.Collectors;
//
//import org.springframework.security.core.GrantedAuthority;
//import org.springframework.security.core.userdetails.UserDetails;
//import org.springframework.stereotype.Component;
//
//import io.jsonwebtoken.Claims;
//import io.jsonwebtoken.JwtException;
//import io.jsonwebtoken.Jwts;
//import io.jsonwebtoken.SignatureAlgorithm;
//import io.jsonwebtoken.io.Decoders;
//import io.jsonwebtoken.security.Keys;
//
//@Component
//public class JwtService {
//	
//    // Existing code...
//
//	 // Method to generate a JWT token for a given username
//    public String generateToken(String username) {
//        Map<String, Object> claims = new HashMap<>();
//        return "token:" + createToken(claims, username, null);
//    }
//
//    // Method to generate a JWT token for a given username and authorities
//    public String generateToken(String username, Collection<? extends GrantedAuthority> authorities) {
//        Map<String, Object> claims = new HashMap<>();
//        return "token:" + createToken(claims, username, authorities);
//    }
//    
////    // Private method to create a JWT token
////    private String createToken(Map<String, Object> claims, String username) {
////        return Jwts.builder()
////                .setClaims(claims)
////                .setSubject(username)
////                .setIssuedAt(new Date(System.currentTimeMillis()))
////                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60))
////                .signWith(getSecKey(), SignatureAlgorithm.HS256).compact();
////    }
// // Modify the createToken method in JwtService
//    private String createToken(Map<String, Object> claims, String username, Collection<? extends GrantedAuthority> authorities) {
//        return Jwts.builder()
//                .setClaims(claims)
//                .setSubject(username)
//                .claim("roles", authorities.stream().map(GrantedAuthority::getAuthority).collect(Collectors.toList()))
//                .setIssuedAt(new Date(System.currentTimeMillis()))
//                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60))
//                .signWith(getSecKey(), SignatureAlgorithm.HS256)
//                .compact();
//    }
//
//
//    // Private method to get the secret key for signing the JWT
//    private Key getSecKey() {
//        byte[] keybytes = Decoders.BASE64.decode("3273357638792F423F4528482B4D6251655368566D597133743677397A244326");
//        return Keys.hmacShaKeyFor(keybytes);
//    }
//
//    // Method to extract the username from a JWT token
//    public String extractUsername(String token) {
//        return extractClaim(token, Claims::getSubject);
//    }
//
//    // Generic method to extract a claim from a JWT token
//    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
//        final Claims claims = extractAllClaims(token);
//        return claimsResolver.apply(claims);
//    }
//
//    // Private method to extract all claims from a JWT token
//    private Claims extractAllClaims(String token) {
//        return Jwts
//                .parserBuilder()
//                .setSigningKey(getSecKey())
//                .build()
//                .parseClaimsJws(token)
//                .getBody();
//    }
//
//    // Method to validate a JWT token against a UserDetails object
//    public Boolean validateToken(String token, UserDetails userDetails) {
//        final String username = extractUsername(token);
//        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
//    }
//
//    // Private method to check if a JWT token is expired
//    private Boolean isTokenExpired(String token) {
//        return extractExpiration(token).before(new Date());
//    }
//
//    // Method to extract the expiration date from a JWT token
//    public Date extractExpiration(String token) {
//        return extractClaim(token, Claims::getExpiration);
//    }
//
//    // Add a method to validate the token and return the principal (claims)
//    public Object validateTokenAndGetClaims(String token) {
//        try {
//            Claims claims = Jwts
//                    .parserBuilder()
//                    .setSigningKey(getSecKey())
//                    .build()
//                    .parseClaimsJws(token)
//                    .getBody();
//            return claims;
//        } catch (JwtException e) {
//            return null; // Token validation failed
//        }
//    }
//}
